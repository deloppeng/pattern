工廠模式

目的:
多個class(產品)型態相同但是需要各自不同logic時，讓每個class(產品)可以各自實作同樣的接口

組成：
工廠角色(Factory)：負責實現創建所有實例的內部邏輯。
抽象產品角色(Product)：它一般是由具體產品繼承的父類或者實現的接口。
具體產品角色(ConcreteProduct)：工廠類所創建的對象就是此角色的實例。

優點:
工廠含必要的邏輯判斷，可以決定在什麼時候創建哪一個產品的實例，客戶端可以免除直接創建產品對象的責任。
可以減少使用者的記憶量。
可以在不修改客戶端資料的情況下，變更或新增具體產品，提高了系統的靈活性。

缺點:
工廠集中所有產品的創建邏輯，一旦無法正常使用，整個系統都受影響。
系統擴展困難，一旦增加新產品就不得不修改工廠邏輯，而在產品多的情況下，可能造成工廠邏輯複雜，不利於系統的擴展與維護。

參考:
https://rongli.gitbooks.io/design-pattern/content/chapter1.html
https://www.runoob.com/design-pattern/factory-pattern.html